{"name":"Zipkin Mesos Framework","tagline":"","body":"Zipkin Mesos Framework\r\n======================\r\n\r\nZipkin is a distributed tracing system. It helps gather timing data needed to troubleshoot latency problems in microservice architectures. It manages both the collection and lookup of this data through a Collector and a Query service.  \r\n\r\nThis Zipkin Mesos Framework is a scheduler that runs Zipkin on Mesos.\r\n\r\nThis Zipkin Mesos framework is being actively developed by Elodina Inc. and is available as a free trial. In the event that community support is sufficient, Elodina plans to release the framework as an open source project distributed under the Apache License, Version 2.0.\r\n\r\nPrerequisites\r\n-------------\r\n\r\n* Java 7 (or higher)\r\n* Apache Mesos 0.19 or newer\r\n* Standalone jar files for Zipkin collector, query and web servers (or sources to build from)\r\n\r\nClone and build the project\r\n\r\n    # git clone https://github.com/elodina/zipkin-mesos-framework.git\r\n    # cd zipkin-mesos-framework\r\n    # ./gradlew jar\r\n\r\nDownload Zipkin standalone jars\r\n    \r\n    # wget http://search.maven.org/remotecontent?filepath=io/zipkin/zipkin-collector-service/1.14.1/zipkin-collector-service-1.14.1-all.jar\r\n    # wget http://search.maven.org/remotecontent?filepath=io/zipkin/zipkin-query-service/1.14.1/zipkin-query-service-1.14.1-all.jar\r\n    # wget http://search.maven.org/remotecontent?filepath=io/zipkin/zipkin-web/1.14.1/zipkin-web-1.14.1-all.jar\r\n    \r\nEnvironment Configuration\r\n--------------------------\r\n\r\nBefore running `./zipkin-mesos.sh`, set the location of libmesos:\r\n\r\n    # export MESOS_NATIVE_JAVA_LIBRARY=/usr/local/lib/libmesos.so\r\n\r\nIf the host running scheduler has several IP addresses you may also need to\r\n\r\n    # export LIBPROCESS_IP=<IP_ACCESSIBLE_FROM_MASTER>\r\n\r\nScheduler Configuration\r\n----------------------\r\n\r\nThe scheduler is configured through the command line.\r\n\r\nFollowing options are available:\r\n\r\n```\r\nUsage: scheduler [options] [config.properties]\r\n\r\nOption               Description                            \r\n------               -----------                            \r\n--api                Api url. Example: http://master:7000   \r\n--bind-address       Scheduler bind address (master,        \r\n                       0.0.0.0, 192.168.50.*, if:eth1).     \r\n                       Default - all                        \r\n--debug <Boolean>    Debug mode. Default - false            \r\n--framework-name     Framework name. Default - zipkin       \r\n--framework-role     Framework role. Default - *            \r\n--framework-timeout  Framework timeout (30s, 1m, 1h).       \r\n                       Default - 30d        \r\n--log                Log file to use. Default - stdout.     \r\n--master             Master connection settings. Examples:  \r\n                      - master:5050                         \r\n                      - master:5050,master2:5050            \r\n                      - zk://master:2181/mesos              \r\n                      - zk://username:password@master:2181  \r\n                      - zk://master:2181,master2:2181/mesos \r\n--principal          Principal (username) used to register  \r\n                       framework. Default - none            \r\n--secret             Secret (password) used to register     \r\n                       framework. Default - none            \r\n--storage            Storage for cluster state. Examples:   \r\n                      - file:zipkin-mesos.json              \r\n                      - zk:/zipkin-mesos                    \r\n                     Default - file:zipkin-mesos.json       \r\n--user               Mesos user to run tasks. Default - none   \r\n```\r\n\r\nRun the scheduler\r\n-----------------\r\n\r\nStart Zipkin scheduler using this command:\r\n\r\n    # ./zipkin-mesos.sh scheduler --master master:5050 --user root --api http://master:6666\r\n\r\nQuick start\r\n-----------\r\n\r\nIn order not to pass the API url to each CLI call lets export the URL as follows:\r\n\r\n```\r\n# export ZM_API=http://master:6666\r\n```\r\n\r\nFirst lets bring up Zipkin traces collector with the default settings. Further in the readme you can see how to change \r\nthese from the defaults.\r\n\r\n```\r\n# ./zipkin-mesos.sh collector add 0\r\nAdded servers 0\r\n\r\ninstance:\r\n  id: 0\r\n  state: Added\r\n  config:\r\n    cpu: 0.5\r\n    mem: 256.0\r\n    port: auto\r\n    adminPort: auto\r\n    env: \r\n    flags: \r\n    configFile: collector-cassandra.scala\r\n\r\n```\r\n\r\nThere are two major things you want to configure when bringing up Zipkin collector: receiver, from which the collector\r\nwill consume traces and the storage, to which the traces will be sent and then grabbed by the query service.\r\n\r\nBy default, collector will consume traces via Scribe. In order to configure a collector to use Kafka one should add\r\n`KAFKA_ZOOKEEPER` environment variable, and point it to the address of Zookeeper, where Kafka cluster is running. Also,\r\nyou may set `KAFKA_TOPIC` in order to consume from particular topic, by default topic name is `zipkin`\r\n\r\nIn order to set the collector storage, one should first select the storage type by pointing to appropriate Scala config \r\nfile. By default it is set for using Cassandra database, although you may also use Redis or MySQL. After setting the \r\nstorage type you may want to set the appropriate environment variables. For example `CASSANDRA_CONTACT_POINTS`, \r\n`CASSANDRA_USERNAME`, `CASSANDRA_PASSWORD` for Cassandra connection credentials.\r\n\r\nAnother important thing you want to configure is traces sample rate. It is set by configuring `COLLECTOR_SAMPLE_RATE`. \r\nIt stands for percentage of how often traces are actually dropped to the storage, where `1.0` means 100%. \r\n\r\nSo, at the end, our initial configuration may look like this:\r\n\r\n```\r\n# ./zipkin-mesos.sh collector config 0 --env KAFKA_ZOOKEEPER=master:2181,KAFKA_TOPIC=notzipkin,CASSANDRA_CONTACT_POINTS=localhost,CASSANDRA_USERNAME=user,CASSANDRA_PASSWORD=pwd,COLLECTOR_SAMPLE_RATE=0.01\r\nUpdated configuration for Zipkin collector instance(s) 0\r\n\r\ninstance:\r\n  id: 0\r\n  state: Added\r\n  config:\r\n    cpu: 0.5\r\n    mem: 256.0\r\n    port: auto\r\n    adminPort: auto\r\n    env: CASSANDRA_CONTACT_POINTS=localhost,COLLECTOR_SAMPLE_RATE=0.01,CASSANDRA_USERNAME=user,KAFKA_ZOOKEEPER=master:218,KAFKA_TOPIC=notzipkin,CASSANDRA_PASSWORD=pwd\r\n    flags: \r\n    configFile: collector-cassandra.scala\r\n```\r\n\r\nNow lets start the server. This call to CLI will block until the server is actually started, but will wait no more than \r\na configured timeout. Timeout can be passed via `--timeout` flag and defaults to `60s`. If a timeout of `0ms` is passed \r\nCLI won't wait for servers to start at all and will reply with \"Scheduled servers ...\" message.\r\n\r\n```\r\n# ./zipkin-mesos.sh collector start 0 --timeout 30s\r\nStarted collector instance(s) 0\r\n\r\ninstance:\r\n  id: 0\r\n  state: Running\r\n  endpoint: http://slave0:31001\r\n  config:\r\n    cpu: 0.5\r\n    mem: 256.0\r\n    port: auto\r\n    adminPort: auto\r\n    env: KAFKA_ZOOKEEPER=master:2181,KAFKA_TOPIC=notzipkin,COLLECTOR_PORT=31001,COLLECTOR_ADMIN_PORT=31002\r\n    flags: \r\n    configFile: collector-dev.scala\r\n```\r\n\r\nNote, that we can see the endpoint, where collector instance is running by having a look at `endpoint` field.\r\nAlso note that along with the collector server, an admin server will be up and running on the same host. You may check \r\nout its port by having a look at `COLLECTOR_ADMIN_PORT` variable.\r\n\r\nBy now you should have a single collector instance running. Here's how you stop it:\r\n\r\n```\r\n# ./zipkin-mesos.sh collector stop 0\r\nStopped collector instance(s) 0\r\n```\r\n\r\nIf you want to remove the server from the cluster completely you may skip `stop` step and call `remove` directly (this will call `stop` under the hood anyway):\r\n\r\n```\r\n./zipkin-mesos.sh collector remove 0\r\nRemoved collector instance(s) 0\r\n```\r\n\r\nNow, you may start a Query server. Usage is pretty similar. Here, you will just want to configure the storage type and\r\nthe storage credentials. Let's add and configure an instance:\r\n\r\n```\r\n# ./zipkin-mesos.sh query add 0 --env CASSANDRA_CONTACT_POINTS=localhost,CASSANDRA_USERNAME=user,CASSANDRA_PASSWORD=pwd\r\nAdded servers 0\r\n```\r\n\r\nStart, stop and remove are pretty much the same, just replace `collector` with `query` in your calls to the CLI.\r\n\r\n```\r\n# ./zipkin-mesos.sh query start 0\r\n# ./zipkin-mesos.sh query stop 0\r\n# ./zipkin-mesos.sh query remove 0\r\n```\r\n\r\nNow, you may start the web service in order to see the UI representation of your traces. Recall that after query service\r\nhas been started, you may see it's endpoint in the `endpoint` field. This is where you want to point your web \r\nservice to send RESTful HTTP requests to. This is configured by setting the `zipkin.web.query.dest` flag:\r\n \r\n```\r\n# ./zipkin-mesos.sh web add 0 --flags zipkin.web.query.dest=slave0:31001\r\nAdded servers 0\r\n```\r\n\r\nStart, stop and remove calls are the same, just add `web` in your calls to the CLI.\r\n\r\n```\r\n# ./zipkin-mesos.sh web start 0\r\n# ./zipkin-mesos.sh web stop 0\r\n# ./zipkin-mesos.sh web remove 0\r\n```\r\n\r\nAfter the start, you may open the web service's `endpoint` address in your browser, there you will see your traces info.\r\n\r\nVerifying all components running\r\n================================\r\n\r\nIn order to verify that all the services running correctly, simply run a `ping` task on this project. Make sure to \r\nconfigure task to produce traces to the Kafka topic, from which your collector is consuming traces:\r\n \r\n```\r\n# KAFKA_BROKER=localhost:9092 KAFKA_TOPIC=notzipkin ./gradlew ping\r\n``` \r\n\r\nThis will post a dummy trace annotation to the specified topic. You should be able to see it in Zipkin web UI.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}